{"version":3,"sources":["components/Header.js","components/Form.js","components/ToDoList.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","headerTitle","Form","useState","toDoTitle","setToDoTitle","toDoContent","setToDoContent","type","onChange","e","target","value","aria-label","onClick","preventDefault","add","ToDoList","toDoListItems","list","map","item","i","key","title","content","delete","length","App","toDoList","setToDoList","Title","Content","concat","index","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAYeA,G,YATA,SAACC,GAEZ,OACI,4BAAQC,UAAU,eACd,4BAAKD,EAAME,gBCoDRC,G,MAxDF,SAACH,GAAW,IAAD,EACcI,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,OAEkBF,mBAAS,IAF3B,mBAEbG,EAFa,KAEAC,EAFA,KAuBpB,OACI,0BAAMP,UAAU,aACZ,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,UAEJ,2BAAOQ,KAAK,OACRR,UAAU,sBACVS,SA3BmB,SAACC,GAChCL,EAAaK,EAAEC,OAAOC,QA2BVA,MAAOR,KAGf,yBAAKJ,UAAU,gCACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,WAEJ,8BAAUA,UAAU,sBAChBa,aAAW,SACXJ,SAjCqB,SAACC,GAClCH,EAAeG,EAAEC,OAAOC,QAiCZA,MAAON,KAGf,yBAAKN,UAAU,iBACX,4BAAQA,UAAU,kBACdQ,KAAK,SAASM,QA9BN,SAACJ,GACrBA,EAAEK,iBACFhB,EAAMiB,IAAIZ,EAAUE,GANpBD,EAAa,IACbE,EAAe,MAgCP,WCfDU,G,MA/BE,SAAClB,GAEd,IAAMmB,EAAgBnB,EAAMoB,KAAKC,KAC7B,SAACC,EAAMC,GACH,OACI,yBAAKC,IAAKD,EAAGtB,UAAU,kBACnB,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,UAAmCqB,EAAKG,OACxC,uBAAGxB,UAAU,aAAb,YAAmCqB,EAAKI,SACxC,4BAAQzB,UAAU,iBACdc,QAAS,kBAAMf,EAAM2B,OAAOJ,KADhC,eAWpB,OACI,yBAAKtB,UAAU,aACX,2CAAiBD,EAAMoB,KAAKQ,QAE5B,6BACKT,MCIFU,EA1BH,WAAO,IAAD,EACkBzB,mBAAS,IAD3B,mBACP0B,EADO,KACGC,EADH,KAYd,OACI,yBAAK9B,UAAU,YACX,kBAAC,EAAD,CAAQC,YAAY,6BAEpB,yBAAKD,UAAU,2BACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAMgB,IAfF,SAACe,EAAOC,GACxBF,EAAYD,EAASI,OAAO,CAAC,MAASF,EAAO,QAAWC,QAe5C,kBAAC,EAAD,CAAUb,KAAMU,EAAUH,OAZnB,SAACQ,GACpBJ,EAAYD,EAASM,QAAO,SAAAd,GAAI,OAAIQ,EAASK,KAAWb,aCF5Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e305859.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = (props) => {\r\n\r\n    return (\r\n        <header className=\"toDo-header\">\r\n            <h1>{props.headerTitle}</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = (props) => {\r\n    const [toDoTitle, setToDoTitle] = useState(\"\");\r\n    const [toDoContent, setToDoContent] = useState(\"\");\r\n\r\n    const handleToDoTitleInputChange = (e) => {\r\n        setToDoTitle(e.target.value);\r\n    }\r\n\r\n    const handleToDoContentInputChange = (e) => {\r\n        setToDoContent(e.target.value);\r\n    }\r\n\r\n    const resetInputField = () => {\r\n        setToDoTitle(\"\");\r\n        setToDoContent(\"\");\r\n    }\r\n\r\n    const callAddToDoList = (e) => {\r\n        e.preventDefault();\r\n        props.add(toDoTitle,toDoContent);\r\n        resetInputField();\r\n    }\r\n\r\n    return (\r\n        <form className=\"toDo-form\">\r\n            <div className=\"toDo-form-title input-group\"> \r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\">Title</span>\r\n                </div>\r\n                <input type=\"text\"\r\n                    className=\"form-control shadow\"\r\n                    onChange={handleToDoTitleInputChange}\r\n                    value={toDoTitle}\r\n                />\r\n            </div>\r\n            <div className=\"toDo-form-detail input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\">Detail</span>\r\n                </div>\r\n                <textarea className=\"form-control shadow\"\r\n                    aria-label=\"Detail\"\r\n                    onChange={handleToDoContentInputChange}\r\n                    value={toDoContent}\r\n                ></textarea>\r\n            </div>\r\n            <div className=\"toDo-form-add\">\r\n                <button className=\"btn btn-success\"\r\n                    type=\"submit\" onClick={callAddToDoList}\r\n                >\r\n                    ADD\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './ToDoList.css'\r\n\r\nconst ToDoList = (props) => {\r\n\r\n    const toDoListItems = props.list.map(\r\n        (item, i) => {\r\n            return (\r\n                <div key={i} className=\"card toDo-item\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Title: {item.title}</h5>\r\n                        <p className=\"card-text\">Content: {item.content}</p>\r\n                        <button className=\"btn btn-danger\"\r\n                            onClick={() => props.delete(i)}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className=\"toDo-List\">\r\n            <h1>Your Tasks: {props.list.length}</h1>\r\n\r\n            <div>\r\n                {toDoListItems}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, {useState} from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Form from './Form'\nimport ToDoList from './ToDoList'\n\nconst App = () => {\n    const [toDoList, setToDoList] = useState([]);\n\n    const addToDoList = (Title, Content) => {\n        setToDoList(toDoList.concat({\"title\": Title, \"content\": Content}));\n    }\n\n    const deleteToDoList = (index) => {\n        setToDoList(toDoList.filter(item => toDoList[index] !== item));\n    }\n\n\n    return (\n        <div className=\"toDo-app\">\n            <Header headerTitle=\"To Do List Used By Hooks\"/>\n\n            <div className=\"toDo-app-body container\">\n                <div className=\"toDo-main\">\n                    <Form add={addToDoList}/>\n                    <ToDoList list={toDoList} delete={deleteToDoList}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}